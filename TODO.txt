TODO

	Auto engine coordination bugs
		
		WHEN there is a deep worker:

			When not running,
				on manual advance,
					update the shallow worker only

			Once running,
				if the shallow worker generation is greater than the deep worker,
					copy from the shallow worker to the deep worker
				runShallow is off
			
			When running,
				on manual or timed advance,
					update the deep worker
					if runShallow is on,
						update the shallow worker

				if the deep worker signals that it will be late,
					copy from the deep worker to the shallow worker
					runShallow is on
				any time the deep worker renders,
					runShallow is off

	Macrocell: step button should always be ONE generation

Hashlife investigation (ongoing)

Flatten macrocell
	Allocate giant buffer
		It should allocate pretty quickly, because it's one object
	Replace interlinked objects with addresses into the buffer

Sliders and selects should have labels in a11y mode

BUG: fix turbo-on issue in Firefox

BUG: fix focus-within issue with popup buttons in Chrome and Firefox

Photosensitivity warning
	Detect intense flickering, and replace with "epilepsy guard" color

Hybrid engine, conventional + HashLife
	Maybe an opportunity to create a more intuitive UI regarding speed control

New UI

EPISODE Milestone: gallery
	Most of the files are small!
	Load their data straight to canvas for preview images
	"Move" everything to RLE
		Load paths, authors from JSON

Milestone: better mobile experience
	Rethink the whole UI, really
		Popups are bad
		Toolbars are bad in portrait orientation

Milestone: pan with arrow keys
	pan: "Arrow(Left, Right, Up, Down)"
	pan faster: [shift arrow keys]

Milestone: drag-and-drop themes
	Merveilles themes
	Old Wireworld themes

Milestone: switch favicon to indicate sim is running

Milestone: EDITOR FUNCTIONALITY
	Research Computer Aided Circuit Design (thanks, Dad!)
	Look at Mike Ash's editor in classic Mac emulator
	Drawing wires, then painting electrons along wires
		Painting electrons could be like choosing a distance, a start point and an end point
	Simplify the construction and instantiation of COMPONENTS
		Components can contain multiple "snapshots" of electrons
		Global snapshots?
		Save and load format should persist all this
	Don't assume the user will run the simulator an exact number of steps just to recover an electron state
